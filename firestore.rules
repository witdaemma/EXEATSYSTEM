rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      // This rule allows any authenticated user to query the users collection.
      // This is needed for the logic that links a staff member's pre-created profile to their 
      // Firebase account on their first login by searching for their email.
      // For production, you might replace this with a more secure method like a Cloud Function.
      allow list: if request.auth != null;

      // A user can read or update their own profile data.
      allow read, update: if request.auth != null && request.auth.uid == userId;

      // A new user profile document can be created if the ID matches the user's Firebase UID.
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for the main exeat requests collection.
    match /exeatRequests/{exeatId} {
      // Anyone can read an exeat request. This is required for the public verification portal.
      allow read: if true;

      // An exeat can only be created by the student it belongs to.
      allow create: if request.auth != null && request.resource.data.studentId == request.auth.uid;
      
      // An exeat can only be updated by authenticated staff members.
      // This rule checks the user's role in the 'users' collection before allowing the write.
      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['porter', 'hod', 'dsa'];
      
      // Rules for the approval trail subcollection within each exeat.
      match /approvalTrail/{commentId} {
        // The trail can be read by anyone (for the verification portal).
        allow read: if true;
        // The trail can be added to by any authenticated user (the backend logic validates the specific role).
        allow create: if request.auth != null; 
      }
    }
    
    // The counter for generating new exeat IDs can be updated by any authenticated user.
    match /counters/exeatRequests {
      allow read, write: if request.auth != null;
    }
  }
}
